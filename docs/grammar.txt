// Top-level declarations

top-level-declarations -> top-level-declaration (top-level-declarations)
top-level-declaration -> contract-declaration | contract-behavior-declaration

// Contract declaration
contract-declaration -> [contract] identifier [{] (variable-declarations) [}]

// Variable declarations

variable-declarations -> variable-declaration (variable-declarations)
variable-declaration -> [var] identifier type-annotation

// Type annotations

type-annotation -> [:] type

// Types

type -> identifier (generic-argument-clause) | [[] type []] | type [[] numeric-literal []] | [[] type [:] type []]

generic-argument-clause -> [<] generic-parameter-list [>]
generic-parameter-list -> type | type [,] generic-argument-list

// Contract behavior declaration

contract-behavior-declaration -> identifier [::] (caller-capability-binding) caller-capability-group (function-declarations)

// Caller capability group

caller-capability-group -> [(] caller-capability-list [)]
caller-capability-list -> caller-capability-identifier | caller-capability-identifier [,] caller-capability-list
caller-capability-identifier -> identifier
caller-capability-binding -> identifier [<-]

// Identifier

identifier -> [a-zA-Z] . [a-zA-Z0-9]*

// Function declarations

function-declarations -> function-declaration (function-declarations)
function-declaration -> function-head identifier parameter-clause (function-result) code-block

function-head -> (declaration-attributes) (declaration-modifiers) [func]
declaration-modifier -> [public] | [mutating]
declaration-modifiers -> declaration-modifier (declaration-modifiers)

function-result -> [->] type

parameter-clause -> [(] [)] | [(] parameter-list [)]
parameter-list -> parameter | parameter [,] parameter-list
parameter -> identifier type-annotation

declaration-attribute -> [@] . [a-zA-Z]*
declaration-attributes -> declaration-attribute (declaration-attributes)

// Code block

code-block -> [{] statements [}]

// Statements

statements -> statement (statements)
statement -> expression
statement -> [return] (expression)
statement -> branch-statement

// Expression

expression -> identifier | binary-expression | function-call | literal | bracketed-expression | subscript-expression
binary-expression -> expression binary-operator expression
bracketed-expression -> [(] expression [)]

subscript-expression -> identifier [[] expression []] (subscript-expression-compound-indices)
subscript-expression-compound-indices -> [[] expression []] (subscript-expression-compound-indices)

// Function Call

function-call -> identifier function-call-argument-clause
function-call-argument-clause -> [(] [)] | [(] function-call-argument-list [)]
function-call-argument-list -> expression | expression [,] function-call-argument-list

// Binary Operators

binary-operator -> [+] | [-] | [=] | [.]

// Branching

if-statement -> [if] expression code-block (else-clause)
else-clause -> [else] code-block

// Literal

literal -> numeric-literal | string-literal | boolean-literal

numeric-literal -> decimal-literal
decimal-literal -> [0-9]+ | [0-9]+ [.] [0-9]+

string-literal -> ["] [a-zA-Z0-9]* ["]
boolean-literal -> [true] | [false]
