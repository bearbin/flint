// RUN: %flintc %s --verify

contract TypeStatesInvalid ($state$, ss, TypeStatesInvalid) {} // expected-error {{Use of invalid character '$' in '$state$'}}

TypeStatesInvalid :: (any) {
  public init() {
    become ss
  }
}

contract TypeStates (State1, State2, State3) {}

TypeStates :: (any) { // expected-error {{State not specified in stateful contract}}
public init() {} // expected-error {{Return from initializer without initializing state in stateful contract}}
}

TypeStates @(any) :: (any) {
  public func foo() {
    become Alpha // expected-error {{Invalid state for contract 'TypeStates' to become}}
                 // expected-warning@-1 {{Only final become will change state}}
    become State1
  }

  public func bar() {
    var x: Int = 0
    become State1
    x = 2 // expected-warning {{Code after return/become will never be executed}}
  }

  public func returnVar() -> Int {
    var x: Int = 42
    return x
    become State2
  }

  public func returnVar2() -> Int {
    var x: Int = 32
    become State1
    return x
  }
}

TypeStates @(State1) :: (any) {
  public func becomeState2() {
    become State2
  }

  public func becomeState3WithoutState2() {
    becomeState3() // expected-error {{Invalid capabilities}}
  }

  public func moveToState2AndDoStuff() {
    becomeState2()
    let x: Int = 0
  }
}

TypeStates @(State2, State3) :: (any) {
  public func becomeState3() {
    become State3
  }
}

TypeStates @(State4) :: (any) { // expected-error {{Invalid state for contract 'TypeStates'}}
}

TypeStates @(State1, State4) :: (any) { // expected-error {{Invalid state for contract 'TypeStates'}}
}
